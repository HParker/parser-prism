#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "parser/current"

$:.unshift(File.expand_path("../lib", __dir__))
require "parser/yarp"

# First, opt in to every AST feature.
Parser::Builders::Default.modernize

# Modify the source map == check so that it doesn't check against the node
# itself so we don't get into a recursive loop.
Parser::Source::Map.prepend(
  Module.new {
    def ==(other)
      self.class == other.class &&
        (instance_variables - %i[@node]).map do |ivar|
          instance_variable_get(ivar) == other.instance_variable_get(ivar)
        end.reduce(:&)
    end
  }
)

# Next, ensure that we're comparing the nodes and also comparing the source
# ranges so that we're getting all of the necessary information.
Parser::AST::Node.prepend(
  Module.new {
    def ==(other)
      super && (location == other.location)
    end
  }
)

def parse(filepath, source)
  parser = Parser::CurrentRuby.default_parser
  parser.diagnostics.consumer = ->(*) {}
  parser.diagnostics.all_errors_are_fatal = true

  buffer = Parser::Source::Buffer.new(filepath, 1)
  buffer.source = source

  expected = parser.parse(buffer)
  actual = Parser::YARP.parse(buffer)
  return true if expected == actual

  puts filepath
  queue = [[expected, actual]]

  while (left, right = queue.shift)
    if left.location != right.location
      puts "expected:"
      pp left
      pp left.location

      puts "actual:"
      pp right
      pp right.location

      return false
    end

    left.children.zip(right.children).each do |left_child, right_child|
      queue << [left_child, right_child] if left_child.is_a?(Parser::AST::Node)
    end
  end

  false
rescue ::Parser::SyntaxError
  false
end

if ARGV[0].nil?
  filepaths = Dir[File.expand_path("../../../ruby/yarp/test/fixtures/whitequark/**/*.txt", __dir__)]
  failures = 0

  focus = nil # "ruby_bug_11989.txt"
  todo = [
    # This includes a node that should really only be supported when a specific
    # flag is passed to the parser.
    "cond_match_current_line.txt",
    "numbered_args_after_27.txt",

    # Numbered parameters.
    "ruby_bug_15789.txt",

    # Rescue on endless method definition.
    "endless_method_command_syntax.txt",

    # Annoying escaped newlines in heredocs thing.
    "ruby_bug_11989.txt",

    # Bugs.
    "ruby_bug_12402.txt",
    "masgn_nested.txt",
    "masgn_splat.txt",
    "parser_slash_slash_n_escaping_in_literals.txt"
  ]

  filepaths.each do |filepath|
    next if focus && focus != File.basename(filepath)
    source = File.read(filepath)

    case File.basename(filepath)
    when "unary_num_pow_precedence.txt"
      source = source.lines[2..].join
    when *todo
      next
    end

    failures += 1 unless parse(filepath, source)
  end

  puts "#{filepaths.size - failures}/#{filepaths.size} tests passed"
elsif ARGV[0] == "-e"
  puts "match!" if parse("-e", ARGV[1])
else
  puts "match!" if parse(ARGV[0], File.read(ARGV[0]))
end
